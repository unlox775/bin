#!/usr/bin/env python3

import subprocess
import sys
import git
from datetime import datetime

def get_commit_info(repo, commit_hash):
    commit = repo.commit(commit_hash)
    date_str = datetime.fromtimestamp(commit.committed_date).strftime('%Y-%m-%d %H:%M:%S')
    author = commit.author.name
    summary = commit.summary

    commit_type = "Direct Push"
    if len(commit.parents) > 1:
        commit_type = "Merge"

    # get first-8 chars of commit hash
    commit_hash = commit_hash[:8]

    return date_str, author, summary, commit_type, commit_hash


def list_branch_changes(repo_path, branch_name):
    cmd = f"git -C {repo_path} log {branch_name} --pretty=oneline --graph"
    repo = git.Repo(repo_path)

    try:
        with subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, universal_newlines=True, bufsize=1) as proc:
            for line in proc.stdout:
                if line.startswith('*'):
                    # Strip all asterisks and pipes and spaces, from the beggining of the line
                    commit_hash = line.lstrip('*|\/ ').split()[0]
                    date, author, summary, commit_type, commit_hash = get_commit_info(repo, commit_hash)
                    print(f"{date} {commit_hash}: {commit_type} by {author} - {summary}")

    except subprocess.CalledProcessError as e:
        print(f"Error executing git command: {e}", file=sys.stderr)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python git_list_branch_changes.py <branch-name>")
        sys.exit(1)

    branch_name = sys.argv[1]
    repo_path = '.'  # Assumes the script is run in the root directory of the repo
    list_branch_changes(repo_path, branch_name)
