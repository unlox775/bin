#!/usr/bin/perl -w

select((select(STDOUT), $| = 1)[0]);

##############################################################
##########################   Main   ##########################
##############################################################

my ( $garbage, $case, $arg, $find, $file, $replace, $show_all, $test_only) = ('','','','');
my @patterns;    my ($skip, $fcount, $found, $tot_count, $b_count, $tot_time) = (0,0,0,0,0,0);    my $start_time = time();
foreach $arg (0..$#ARGV)
{
	unless ( ($ARGV[$arg]) && ($skip == 0) ) { $skip = 0;    next; }
	if ($ARGV[$arg] =~ /^-f(ind)?$/) 
	{ 
		$arg++;    my $find = $ARGV[$arg];
                $find =~ s/\\n/\n/g;    ###  Literal find
                $find =~ s/\\r/\r/g;    ###  Literal find
                $find =~ s/([^\w\d\n\r])/\\$1/g;    ###  Literal find
                $find =~ s/[\n]/'\n'/eg;    ###  Literal find
                $find =~ s/[\r]/'\r'/eg;    ###  Literal find
 		$find = "\[$find\]" if ( $find =~ /^\w$/ ) || ( $find =~ /^\\\W$/ );    ###  Sq Brackets if 1 char long
		eval "\$garbage =~ /$find/;";    if ( $@ ne "" ) { $find = ''; }

		unshift(@patterns,$find) unless $find eq '';
                @patterns = reverse sort byLength @patterns;

		$skip = 1;    next; 
	}
        if ($ARGV[$arg] =~ /^-file$/)
        {
                $arg++;    $file = $ARGV[$arg];
                if (! -r "$file" ) { print "No Read Priveledges for Pattern File ($file).\n";    exit 0; }
                if ( -d "$file" ) { print "-file ( $file ) is a Directory.\n";    exit 0; }
                unless (open(PATFILE,"$file")) { print "Open of Pattern File ($file) failed.  $!";     exit 0; }
                my @add_pats = <PATFILE>;    close PATFILE;

		foreach (0..$#add_pats) 
		{
                        $add_pats[$_] =~ s/\\n/\n/g;    ###  Literal find
                        $add_pats[$_] =~ s/\\r/\r/g;    ###  Literal find
                        $add_pats[$_] =~ s/([^\w\d\n\r])/\\$1/g;    ###  Literal find
                        $add_pats[$_] =~ s/[\n]/'\n'/eg;    ###  Literal find
                        $add_pats[$_] =~ s/[\r]/'\r'/eg;    ###  Literal find
			$add_pats[$_] = "\[$add_pats[$_]\]" if ( $add_pats[$_] =~ /^\w$/ ) || ( $add_pats[$_] =~ /^\\\W$/ );    ###  Sq Brackets if 1 char long
			eval "\$garbage =~ /$add_pats[$_]/;";    if ( $@ ne "" ) { $add_pats[$_] = ''; }
		}

		unshift(@patterns,@add_pats);
                @patterns = reverse sort byLength @patterns;

                $skip = 1;    next;
        }
	if ($ARGV[$arg] =~ /^-r(eplace)?$/) 
	{ 
		$arg++;    
		$replace = $ARGV[$arg];    
                $replace =~ s/\\n/\n/g;    ###  Literal replace
                $replace =~ s/\\r/\r/g;    ###  Literal replace
                $replace =~ s/\\t/\t/g;    ###  Literal replace
		$skip = 1;    next; 
	}
	if ($ARGV[$arg] =~ /^-i(nsensitive)?$/) { $case = "i";     next; }
	if ($ARGV[$arg] =~ /^-a(ll)?$/) { $show_all = "1";     next; }
	if ($ARGV[$arg] =~ /^-t(est)?$/) { $test_only = "1";     next; }

	unless ( defined $replace ) { print "Missing replace(-r) value.\n";    exit 0; }
	unless ( @patterns ) { print "Missing find value(s).\n";    exit 0; }
	$replace = '' if $replace eq '-';

	$fcount++;
	my $file = $ARGV[$arg];
	my $count = 0;

	if ( (-d "$file" ) || (! -T "$file" ) ) { next; }
	if (! -e "$file" ) { print "$file does not exist.\n";    next; }
	if (! -r "$file" ) { print "No Read Priveledges for $file.\n";    next; }
	if (! -w "$file" ) { print "No Write Priveledges for $file.\n";    next; }

	unless (open(THISFILE,"$file")) { print "Open of Target File '$file' for Read In failed.  $!";     next; }
	my @file_contents = <THISFILE>;
	close THISFILE;
        my $content = join('',@file_contents);

        $b_count += length(join('',@file_contents));

	my ($find, $__);   my $num = 0;    #print "\n(" . length(join('',@file_contents)) . ")(" . length(join('',@patterns)) . ")";
	my @_patterns = @patterns;
	foreach $find (@_patterns)
	{
#		$num++;    print ".";
		next if ($find eq '');

                if ( ($case) && ( $content !~ /$find/i ) ) { next; }
                elsif ( $content !~ /$find/ ) { next; }
	
		my $prev_count = $count;    $prev_line = $content;
		if ($case) { $count += ($content =~ s/$find/$replace/ig); } 
		else { $count += ($content =~ s/$find/$replace/g); } 
		print "
$prev_line
-----------------------------------------------------------
$content" if ($count != $prev_count) && ($test_only);
	}
        print "$file\t:\n\t\t\t\t\t\t\t\t\t$count occurences replaced. (file $fcount of ~" . ($#ARGV-3) . ")\n" if ($count) || ($show_all);
        $found++ if $count;    $tot_count += $count;

	unless ( ($test_only) || (!$count) )
	{
#		print "Write out here ($file).\n";
		unless (open(THISFILE,">$file")) { print "Open of Target file '$file' for Write failed.  $!";     next; }
		print THISFILE $content;
		close THISFILE;
	}
	undef $content;    undef @file_contents;
}
unless ( defined $replace ) { print "Missing replace(-r) value.\n";    exit 0; }
unless ( @patterns ) { print "Missing find value(s).\n";    exit 0; }

$tot_time = time() - $start_time;    $tot_time = 1 if $tot_time == 0;    (my $secs = ($tot_time % 60)+100) =~ s/^1//;    my $mins = int($tot_time / 60);

print "$tot_count occurrences replaced in $found of $fcount files searched (" . sprintf("%.1f",$b_count/1024) . " Kb total in $mins:$secs (" . sprintf("%.1f",($b_count/1024)/$tot_time) . " Kb/sec))\n" if $found;
print "No occurrences found or replaced in any file (" . sprintf("%.1f",$b_count/1024) . " Kb total in $mins:$secs (" . sprintf("%.1f",($b_count/1024)/$tot_time) . " Kb/sec))\n" unless $found;

##############################################################
########################## End Main ##########################
##############################################################

sub byLength { length($a) <=> length($b); }

