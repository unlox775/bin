#!/usr/bin/env python3

import boto3
import sys
import os

# Check if the CLI arguments are provided and set the region and profile variables accordingly.
# argv[0] is always the script name, so we start checking from argv[1].

# Read the first command line arg as the region name; default to 'us-east-1'
region_name = sys.argv[1] if len(sys.argv) > 1 else 'us-east-1'

# Read the second command line arg as the profile name; default to 'default'
profile_name = sys.argv[2] if len(sys.argv) > 2 else 'default'
print(f"Using region: {region_name}, profile: {profile_name}")
# set AWS_PROFILE and AWS_REGION environment variables, so aws-google gets them
os.environ['AWS_PROFILE'] = profile_name
os.environ['AWS_REGION'] = region_name

session = boto3.Session(profile_name=profile_name, region_name=region_name)


def get_associated_resources(sg_id):
    ec2 = session.resource('ec2')
    ec2_client = session.client('ec2')
    rds = session.client('rds')
    elbv2 = session.client('elbv2')
    redshift = session.client('redshift')
    lambda_client = session.client('lambda')
    ecs = session.client('ecs')
    fsx = session.client('fsx')
    dms = session.client('dms')

    # EC2 Instances
    instances = list(ec2.instances.filter(Filters=[{'Name': 'instance.group-id', 'Values': [sg_id]}]))
    if len(instances) > 0:
        print(f"USED BY => EC2: {len(instances)} instance(s) {', '.join([i.id for i in instances[:3]])}")

    # ELBs
    elbs = elbv2.describe_load_balancers()
    associated_elbs = [elb['LoadBalancerArn'] for elb in elbs['LoadBalancers'] if sg_id in elb['SecurityGroups']]
    if len(associated_elbs) > 0:
        print(f"USED BY => ELBs: {len(associated_elbs)}")

    # RDS Databases
    db_instances = rds.describe_db_instances()
    associated_dbs = [db['DBInstanceIdentifier'] for db in db_instances['DBInstances'] if sg_id in db['VpcSecurityGroups']]
    if len(associated_dbs) > 0:
        print(f"USED BY => RDS: {len(associated_dbs)} database(s) {', '.join(associated_dbs[:3])}")

    # Elasticache Clusters
    elasticache = session.client('elasticache')
    clusters = elasticache.describe_cache_clusters()
    associated_clusters = [cluster['CacheClusterId'] for cluster in clusters['CacheClusters'] if sg_id in [sg['SecurityGroupId'] for sg in cluster['SecurityGroups']]]
    if len(associated_clusters) > 0:
        print(f"USED BY => Elasticache: {len(associated_clusters)} cluster(s) {', '.join(associated_clusters[:3])}")

    # Redshift Clusters
    clusters = redshift.describe_clusters()
    associated_clusters = [cluster['ClusterIdentifier'] for cluster in clusters['Clusters'] if sg_id in [sg['VpcSecurityGroupId'] for sg in cluster['VpcSecurityGroups']]]
    if len(associated_clusters) > 0:
        print(f"USED BY => Redshift: {len(associated_clusters)} cluster(s) {', '.join(associated_clusters[:3])}")

    # Lambda Functions
    functions = lambda_client.list_functions()
    associated_functions = [func['FunctionName'] for func in functions['Functions'] if sg_id in func.get('VpcConfig', {}).get('SecurityGroupIds', [])]
    if len(associated_functions) > 0:
        print(f"USED BY => Lambda: {len(associated_functions)} function(s) {', '.join(associated_functions[:3])}")

    # ENIs
    enis = list(ec2.network_interfaces.filter(Filters=[{'Name': 'group-id', 'Values': [sg_id]}]))
    # Separate the list of ENIs into those that are attached and have an attachment ID, and those that are not attached
    # We get this first by doing a eni.get('Attachment', {}), then check if 'InstanceId' in attachment
    attached_enis = []
    non_attached_enis = []
    for eni_obj in enis:
        eni_response = ec2_client.describe_network_interfaces(NetworkInterfaceIds=[eni_obj.id])
        eni = eni_response['NetworkInterfaces'][0]

        attachment = eni.get('Attachment', {})
        if 'InstanceId' in attachment:
            attached_enis.append(f"{eni_obj.id} ({eni['RequesterId']})")
        else:
            non_attached_enis.append(f"{eni_obj.id} ({eni['RequesterId']})")
    if len(attached_enis) > 0:
        print(f"USED BY => Attached ENIs: {len(attached_enis)} network interface(s) {', '.join(attached_enis[:3])}")
    if len(non_attached_enis) > 0:
        print(f"USED BY => Non-attached ENIs: {len(non_attached_enis)} network interface(s) {', '.join(non_attached_enis[:3])}")

    # # # ECS Tasks
    # # task_arns = ecs.list_tasks()['taskArns']
    # # associated_tasks = []
    # # for task_arn in task_arns:
    # #     task_detail = ecs.describe_tasks(tasks=[task_arn])['tasks'][0]
    # #     if sg_id in task_detail.get('attachments', [{}])[0].get('details', [{}])[0].get('value', ''):
    # #         associated_tasks.append(task_arn)
    # # if len(associated_tasks) >= 3:
    # #     print(f"USED BY => ECS: {len(associated_tasks)} task(s) {', '.join(associated_tasks[:3])}")
    # cluster_arns = ecs.list_clusters()['clusterArns']
    # all_task_arns = []
    # associated_tasks = []
    # for cluster_arn in cluster_arns:
    #     task_arns = ecs.list_tasks(cluster=cluster_arn)['taskArns']
    #     all_task_arns.extend(task_arns)
    #     for task_arn in all_task_arns:
    #         task_detail = ecs.describe_tasks(cluster=cluster_arn, tasks=[task_arn])['tasks'][0]
    #         if sg_id in task_detail.get('attachments', [{}])[0].get('details', [{}])[0].get('value', ''):
    #             associated_tasks.append(task_arn)
    # if len(associated_tasks) > 0:
    #     print(f"USED BY => ECS: {len(associated_tasks)} task(s) {', '.join(associated_tasks[:3])}, cluster: {cluster_arn}")



    # FSx Filesystems
    fsx_filesystems = fsx.describe_file_systems()['FileSystems']
    associated_fsx = [fs['FileSystemId'] for fs in fsx_filesystems if sg_id in fs.get('SecurityGroupIds', [])]
    if len(associated_fsx) > 0:
        print(f"USED BY => FSx: {len(associated_fsx)} filesystem(s) {', '.join(associated_fsx[:3])}")

    # DMS replication instances
    dms_reps = dms.describe_replication_instances()['ReplicationInstances']
    associated_dms = [rep['ReplicationInstanceIdentifier'] for rep in dms_reps if sg_id in [sg['VpcSecurityGroupId'] for sg in rep['VpcSecurityGroups']]]
    if len(associated_dms) > 0:
        print(f"USED BY => DMS: {len(associated_dms)} replication instance(s) {', '.join(associated_dms[:3])}")

    # Create a dictionary to store the number of each associated resource
    associated_resources = {
        'EC2': len(instances),
        'ELBs': len(associated_elbs),
        'RDS': len(associated_dbs),
        'Elasticache': len(associated_clusters),
        'Redshift': len(associated_clusters),
        'Lambda': len(associated_functions),
        'Attached ENIs': len(attached_enis),
        'Non-attached ENIs': len(non_attached_enis),
        # 'ECS': len(associated_tasks),
        'FSx': len(associated_fsx),
        'DMS': len(associated_dms)
    }

    return associated_resources

# Let's include the main function that lists the security groups and their rules
def main():
    ec2 = session.client('ec2')
    security_groups = ec2.describe_security_groups()['SecurityGroups']

    port_summary = {}
    sg_with_no_attached_resources = []
    service_groups_referenced_by_sg = {}

    for sg in security_groups:
        sg_id = sg['GroupId']
        name = sg['GroupName']
        print(f"\nSecurity Group ID: {sg_id}, Name: {name}")
        description = sg['Description']
        if description:
            print(f"Description: {description}")
        rule_lines = []
        inbound_port_ranges = []
        for perm in sg['IpPermissions']:
            from_port = perm.get('FromPort', 'ALL')
            to_port = perm.get('ToPort', 'ALL')
            protocol = perm.get('IpProtocol', 'ALL')

            # get the distinct profile of this port range
            #    - Just show one port if from and to are the same, e.g. "80"
            #    - But if they are different (i.e. a range of ports), show the range, e.g. "3000-3010"
            port_range = perm.get('FromPort', 'ALL')
            if port_range != 'ALL' and perm.get('ToPort', 'ALL') != port_range:
                port_range = f"{port_range}-{perm['ToPort']}"

            for range in perm['IpRanges']:
                rule_lines.append(f"Protocol: {protocol} | From Port: {from_port} | To Port: {to_port} | Accessible from IP ranges, CIDR: {range['CidrIp']}")
                inbound_port_ranges.append(f"{port_range} from cidr: {range['CidrIp']}")

            for sg_range in perm.get('UserIdGroupPairs', []):
                rule_lines.append(f"Protocol: {protocol} | From Port: {from_port} | To Port: {to_port} | Accessible from resources that are in Service Group: {sg_range['GroupId']}")
                inbound_port_ranges.append(f"{port_range} from service group: {sg_range['GroupId']}")
                if sg_range['GroupId'] not in service_groups_referenced_by_sg:
                    service_groups_referenced_by_sg[sg_range['GroupId']] = []
                service_groups_referenced_by_sg[sg_range['GroupId']].append(f"{sg_id}[{name}]")
        if len(rule_lines) > 0:
            print("  <=== Inbound Rules:")
            for line in rule_lines:
                print(f"      {line}")
        
        rule_lines = []
        for perm in sg['IpPermissionsEgress']:
            from_port = perm.get('FromPort', 'ALL')
            to_port = perm.get('ToPort', 'ALL')
            protocol = perm.get('IpProtocol', 'ALL')
            for range in perm['IpRanges']:
                rule_lines.append(f"Protocol: {protocol} | From Port: {from_port} | To Port: {to_port} | Can connect outward to IP ranges, CIDR: {range['CidrIp']}")
            for sg_range in perm.get('UserIdGroupPairs', []):
                rule_lines.append(f"Protocol: {protocol} | From Port: {from_port} | To Port: {to_port} | Can connect outward to resources that are in Service Group: {sg_range['GroupId']}")
                if sg_range['GroupId'] not in service_groups_referenced_by_sg:
                    service_groups_referenced_by_sg[sg_range['GroupId']] = []
                service_groups_referenced_by_sg[sg_range['GroupId']].append(f"{sg_id}[{name}]")

        if len(rule_lines) > 0:
            print("  ===> Outbound Rules:")
            for line in rule_lines:
                print(f"      {line}")

        # Now get the associated resources for this security group
        associated_resources = get_associated_resources(sg_id)

        # If there are no associated resources, add to the list of security groups with no attached resources
        if sum(associated_resources.values()) == 0:
            sg_with_no_attached_resources.append(f"{sg_id}[{name}]")
        

        for port_range in inbound_port_ranges:
            if port_range not in port_summary:
                port_summary[port_range] = []
            port_summary[port_range].append((f"{sg_id}[{name}]", associated_resources))

        print("----------------------------------------------------------", flush=True)

    # Display port summary:
    print("Report of inbound ports and the security groups that allow access to them:")
    sorted_port_summary = sorted(port_summary.items(), key=lambda x: x[0])
    for port, sg_list in sorted_port_summary:
        print(f"Inbound Port: {port}:")
        for sg_id, resources in sg_list:
            # skip if there are no associated resources
            if sum(resources.values()) == 0:
                continue
            resources_str = ', '.join([f"{k}: {v}" for k, v in resources.items() if v > 0])
            print(f"    Security Group ID: {sg_id} with attached: {resources_str}")

    # Display service groups with no attached resources, but referenced by other service groups
    print("\nService Groups with no attached resources, but referenced by other service groups (link could be removed?):")
    for sg in sg_with_no_attached_resources:
        if sg in service_groups_referenced_by_sg:
            print(f"    {sg} referenced by: {', '.join(service_groups_referenced_by_sg[sg])}")

    # Display security groups with no attached resources, but only those that are not referenced by other service groups
    print("\nSecurity Groups with no attached resources (could be deleted?):")
    for sg in sg_with_no_attached_resources:
        if sg not in service_groups_referenced_by_sg:
            print(f"    {sg}")


if __name__ == '__main__':
    main()
