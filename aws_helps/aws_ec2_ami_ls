#!/usr/bin/env python3

import boto3
import sys
import os
import argparse

def list_ec2_amis(region, profile):
    # Set up boto3 session using provided profile
    session = boto3.Session(profile_name=profile, region_name=region)
    
    # Create a client for the EC2 service
    ec2_client = session.client('ec2')
    
    # Get the list of AMIs
    response = ec2_client.describe_images(Owners=['self'])
    
    return response.get('Images', [])

def main():
    parser = argparse.ArgumentParser(
        description='''EC2 AMI inventory and management tool.

This tool lists all EC2 AMIs owned by the current account in a specified region, providing 
key information about image types, public/private status, and root device configurations. 
It's designed for AMI management, cleanup operations, and infrastructure documentation.

Key use cases:
- AMI inventory: List all custom AMIs in an account
- Cleanup operations: Identify unused or outdated AMIs
- Infrastructure documentation: Document AMI usage and types
- Cost optimization: Find AMIs that may be candidates for deregistration
- Compliance: Audit AMI ownership and public/private status

The tool sorts AMIs by public status (public first) and root device type, making it easy 
to identify different types of images and their accessibility. It focuses on AMIs owned 
by the current account for security and management purposes.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('region', help='AWS region (default: us-east-1)', nargs='?', default='us-east-1')
    parser.add_argument('profile', help='AWS profile name (default: default)', nargs='?', default='default')
    args = parser.parse_args()

    region = args.region
    profile = args.profile

    os.environ['AWS_PROFILE'] = profile
    os.environ['AWS_REGION'] = region
    
    amis = list_ec2_amis(region, profile)
    
    if not amis:
        print(f"No EC2 AMIs found in region {region} for profile {profile}.")
        return
    
    print(f"EC2 AMIs in region {region} for profile {profile}:")
    # sort, public first, then sort by root device type
    amis.sort(key=lambda ami: ami['RootDeviceType'])
    amis.sort(key=lambda ami: ami['Public'], reverse=True)
    for ami in amis:
        public_status = "Public" if ami['Public'] else "Private"
        print(f"ID: {ami['ImageId']}, Root Device Type: {ami['RootDeviceType']}, Status: {public_status}")

if __name__ == '__main__':
    main()
