#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import signal
import subprocess
import botocore.exceptions

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    # Get the current AWS profile
    profile = os.environ.get('AWS_PROFILE', os.environ.get('AWS_DEFAULT_PROFILE', 'default'))
    
    print(f"Using AWS profile: {profile}")
    
    try:
        # Try to get caller identity - lightweight call to verify credentials
        sts = boto3.client('sts')
        identity = sts.get_caller_identity()
        account_id = identity['Account']
        username = identity['Arn'].split('/')[-1]
        print(f"Authenticated as {username} in account {account_id}")
        
        # Now check SSM access - we need to use a different approach
        # Instead of describe_sessions, we'll use a more direct check
        ssm = boto3.client('ssm')
        ec2 = boto3.client('ec2')
        
        print("Checking SSM session permissions...")
        
        # Find any running instance ID to test against
        try:
            ec2_response = ec2.describe_instances(
                Filters=[{'Name': 'instance-state-name', 'Values': ['running']}],
                MaxResults=10
            )
            
            if not ec2_response.get('Reservations') or len(ec2_response['Reservations']) == 0:
                print("Warning: No running EC2 instances found. Cannot verify SSM permissions.")
                print("You may encounter issues when trying to establish port forwarding.")
                return True  # Continue anyway
                
            instance_id = ec2_response['Reservations'][0]['Instances'][0]['InstanceId']
            
            # Check if we have ssm:StartSession permission
            # We'll do this by using the IAM policy simulator
            iam = boto3.client('iam')
            try:
                # Get the current user ARN
                current_user_arn = identity['Arn']
                
                # Use the IAM policy simulator to check permissions
                # This is a more accurate way to check if we can start a session
                print(f"Testing SSM permission with instance: {instance_id}")
                
                # Since we can't easily use the simulator, we'll try a mock command execution
                # This is more likely to properly check permissions
                try:
                    # Try to execute a command that will fail for valid reasons other than permissions
                    # This tests if we have the necessary IAM permissions without actually running a command
                    ssm.send_command(
                        InstanceIds=[instance_id],
                        DocumentName='AWS-RunShellScript',
                        Parameters={'commands': ['echo "test"']},
                        TimeoutSeconds=30,
                        MaxConcurrency='1',
                        MaxErrors='0'
                    )
                    
                    # If we get here, we have the permissions for SSM commands
                    # This doesn't guarantee SSM sessions will work, but it's a good indicator
                    print("✓ You appear to have SSM permissions.")
                    return True
                    
                except botocore.exceptions.ClientError as e:
                    error_code = e.response.get('Error', {}).get('Code')
                    error_msg = str(e)
                    
                    if 'AccessDenied' in error_msg or error_code == 'AccessDeniedException':
                        print("✗ You don't have permission to use SSM.")
                        print(f"\nYou need ssm:StartSession permission to use port forwarding.")
                        print(f"Error message: {error_msg}")
                        print(f"\nYou may need to switch to a profile with more permissions. Try:")
                        print(f"  export AWS_PROFILE=<profile_name>")
                        print(f"  # or")
                        print(f"  aws sso login --profile <profile_name>")
                        
                        profiles = list_aws_profiles()
                        if profiles:
                            print("\nAvailable AWS profiles:")
                            for p in profiles:
                                print(f"  {p}")
                        
                        try:
                            if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                                sys.exit(1)
                        except KeyboardInterrupt:
                            print("\nOperation cancelled by user. Exiting.")
                            sys.exit(0)
                        return False
                    elif 'InvalidInstanceId' in error_msg:
                        # Instance might not have SSM agent, but we have permission
                        print("✓ You appear to have SSM permissions (but instance might not be SSM-enabled).")
                        return True
                    else:
                        print(f"Warning: Unexpected error checking SSM permissions: {error_msg}")
                        return True  # Continue anyway
            
            except Exception as e:
                print(f"Warning: Could not check IAM permissions: {str(e)}")
                print("You may encounter issues when trying to establish port forwarding.")
                try:
                    if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                        sys.exit(1)
                except KeyboardInterrupt:
                    print("\nOperation cancelled by user. Exiting.")
                    sys.exit(0)
                return False
                
        except botocore.exceptions.ClientError as e:
            print(f"Warning: Could not list EC2 instances: {str(e)}")
            print("You may encounter issues when trying to establish port forwarding.")
            try:
                if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                    sys.exit(1)
            except KeyboardInterrupt:
                print("\nOperation cancelled by user. Exiting.")
                sys.exit(0)
            return False
            
    except botocore.exceptions.ClientError as e:
        print(f"AWS Access Error: {str(e)}")
        print(f"\nYou may need to switch AWS profiles. Try:")
        print(f"  export AWS_PROFILE=<profile_name>")
        print(f"  # or")
        print(f"  aws sso login --profile <profile_name>")
        
        profiles = list_aws_profiles()
        if profiles:
            print("\nAvailable AWS profiles:")
            for p in profiles:
                print(f"  {p}")
                
        try:
            if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                sys.exit(1)
        except KeyboardInterrupt:
            print("\nOperation cancelled by user. Exiting.")
            sys.exit(0)
        return False

def list_aws_profiles():
    """List available AWS profiles in credentials and config files"""
    profiles = set()
    
    # Check ~/.aws/credentials
    cred_path = os.path.expanduser("~/.aws/credentials")
    if os.path.exists(cred_path):
        with open(cred_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile != 'default' and not profile.startswith('profile '):
                        profiles.add(profile)
    
    # Check ~/.aws/config
    config_path = os.path.expanduser("~/.aws/config")
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile.startswith('profile '):
                        profiles.add(profile[8:])  # Remove 'profile ' prefix
    
    return sorted(list(profiles))

def get_rds_instances(search_term):
    """Find RDS MySQL instances matching the search term"""
    rds = boto3.client('rds')
    
    # List all RDS instances
    response = rds.describe_db_instances()
    
    # Convert search term to lowercase for case-insensitive comparison
    search_term_lower = search_term.lower()
    
    result = []
    for instance in response['DBInstances']:
        # Only include MySQL instances
        if 'mysql' not in instance['Engine'].lower():
            continue
            
        instance_id = instance['DBInstanceIdentifier']
        endpoint = instance['Endpoint']['Address']
        port = instance['Endpoint']['Port']
        engine = instance['Engine']
        resource_id = instance.get('DbiResourceId', '')
        db_name = instance.get('DBName', '')
        master_username = instance.get('MasterUsername', '')
        
        # Get tags if they exist
        tags = {}
        try:
            tag_list = rds.list_tags_for_resource(ResourceName=instance['DBInstanceArn'])
            tags = {tag['Key']: tag['Value'] for tag in tag_list.get('TagList', [])}
        except Exception:
            # Some instances might not support tagging or we might not have permission
            pass
        
        # Check all relevant fields for the search term
        if any([
            search_term_lower in instance_id.lower(),                # Instance ID
            search_term_lower in endpoint.lower(),                   # Endpoint address
            search_term_lower in engine.lower(),                     # Engine type (e.g., aurora-mysql)
            db_name and search_term_lower in db_name.lower(),        # Database name if available
            search_term_lower in resource_id.lower(),                # Resource ID
            search_term_lower in master_username.lower(),            # Master username
            # Check all tag values
            any(search_term_lower in value.lower() for value in tags.values()),
            # Check all tag keys
            any(search_term_lower in key.lower() for key in tags.keys())
        ]):
            # Create a dictionary of relevant instance information
            instance_info = {
                'id': instance_id,
                'endpoint': endpoint,
                'port': port,
                'engine': engine,
                'resource_id': resource_id,
                'db_name': db_name if db_name else 'N/A',
                'master_username': master_username,
                'tags': tags
            }
            result.append(instance_info)
    
    return result

def select_rds_instance(rds_instances):
    """Present a menu to select an RDS instance"""
    if not rds_instances:
        print("No RDS MySQL instances found matching the search term.")
        sys.exit(1)
        
    choices = [f"{instance['id']} - {instance['endpoint']} ({instance['engine']})" for instance in rds_instances]
    
    questions = [
        inquirer.List('selected_instance',
                      message="Which RDS instance do you want to connect to?",
                      choices=choices)
    ]
    
    try:
        answers = inquirer.prompt(questions)
        if answers is None:
            print("\nSelection cancelled. Exiting.")
            sys.exit(0)
        selected_index = choices.index(answers['selected_instance'])
        return rds_instances[selected_index]
    except KeyboardInterrupt:
        print("\nOperation cancelled. Exiting.")
        sys.exit(0)

def find_available_ec2(region):
    """Find an available EC2 instance with SSM for tunneling"""
    ssm = boto3.client('ssm')
    ec2 = boto3.client('ec2')
    
    try:
        # Find instances with SSM agent running
        response = ssm.describe_instance_information()
        
        if not response['InstanceInformationList']:
            print("No EC2 instances with SSM agent found. Unable to create tunnel.")
            sys.exit(1)
            
        # Return first available instance
        instance_id = response['InstanceInformationList'][0]['InstanceId']
        
        # Get instance details (optional - for display only)
        instance_details = ec2.describe_instances(InstanceIds=[instance_id])
        instance_name = "Unknown"
        
        for tag in instance_details['Reservations'][0]['Instances'][0].get('Tags', []):
            if tag['Key'] == 'Name':
                instance_name = tag['Value']
                break
                
        print(f"Using EC2 instance {instance_id} ({instance_name}) as tunnel endpoint")
        return instance_id
    except Exception as e:
        print(f"Error finding available EC2 instance: {str(e)}")
        sys.exit(1)

def setup_port_forwarding(rds_endpoint, rds_port, local_port=None):
    """Setup port forwarding using an EC2 instance with SSM"""
    # If no local port is specified, use 13306 as the default port
    if local_port is None:
        local_port = 13306
    
    # Find an available EC2 instance for tunneling
    region = boto3.session.Session().region_name
    instance_id = find_available_ec2(region)
    
    print(f"\nSetting up RDS port forwarding through SSM:")
    print(f"  Local port:     {local_port}")
    print(f"  RDS endpoint:   {rds_endpoint}")
    print(f"  RDS port:       {rds_port}")
    print("\nConnect using:")
    print(f"  mysql -h 127.0.0.1 -P {local_port} -u <username> -p<password> <database>")
    print("\nPort forwarding active. Press Ctrl+C to quit.\n")
    
    # Define the SSM port forwarding command
    cmd = [
        "aws", "ssm", "start-session",
        "--target", instance_id,
        "--document-name", "AWS-StartPortForwardingSessionToRemoteHost",
        "--parameters", f"localPortNumber={local_port},host={rds_endpoint},portNumber={rds_port}"
    ]
    
    # Handle Ctrl+C gracefully
    def signal_handler(sig, frame):
        print("\nPort forwarding stopped.")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    # Start port forwarding
    subprocess.run(cmd)

def main():
    # Print usage if no search term is provided
    if len(sys.argv) < 2:
        print("Usage: aws_rds_mysql_ssm_port_forward <search_term> [local_port]")
        print("  <search_term>: String to match RDS instance names")
        print("  [local_port]: Optional local port to use (default: 13306)")
        sys.exit(1)

    # Get search term from first CLI arg
    search_term = sys.argv[1]
    
    # Get optional local port from second CLI arg
    local_port = None
    if len(sys.argv) > 2:
        try:
            local_port = int(sys.argv[2])
            if local_port < 1024 or local_port > 65535:
                print("ERROR: Local port must be between 1024 and 65535")
                sys.exit(1)
        except ValueError:
            print(f"ERROR: Invalid port number: {sys.argv[2]}")
            sys.exit(1)
    
    # Check AWS access before proceeding - this now checks SSM permissions too
    check_aws_access()
    
    # Find RDS instances matching the search term
    print(f"Searching for MySQL RDS instances matching: {search_term}")
    rds_instances = get_rds_instances(search_term)
    
    if not rds_instances:
        print("No MySQL RDS instances found matching the search term.")
        sys.exit(1)
    
    # Let user select an RDS instance
    selected_rds = select_rds_instance(rds_instances)
    
    # Setup port forwarding to RDS through an EC2 instance
    setup_port_forwarding(
        selected_rds['endpoint'], 
        selected_rds['port'],
        local_port
    )

if __name__ == "__main__":
    main()