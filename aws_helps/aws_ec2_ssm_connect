#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import botocore.exceptions

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    # Get the current AWS profile
    profile = os.environ.get('AWS_PROFILE', os.environ.get('AWS_DEFAULT_PROFILE', 'default'))
    
    print(f"Using AWS profile: {profile}")
    
    try:
        # Try to get caller identity - lightweight call to verify credentials
        sts = boto3.client('sts')
        identity = sts.get_caller_identity()
        account_id = identity['Account']
        username = identity['Arn'].split('/')[-1]
        print(f"Authenticated as {username} in account {account_id}")
        
        # Now check SSM access - we need to use a different approach
        ssm = boto3.client('ssm')
        ec2 = boto3.client('ec2')
        
        print("Checking SSM session permissions...")
        
        # Find any running instance ID to test against
        try:
            ec2_response = ec2.describe_instances(
                Filters=[{'Name': 'instance-state-name', 'Values': ['running']}],
                MaxResults=10
            )
            
            if not ec2_response.get('Reservations') or len(ec2_response['Reservations']) == 0:
                print("Warning: No running EC2 instances found. Cannot verify SSM permissions.")
                print("You may encounter issues when trying to establish an SSM session.")
                return True  # Continue anyway
                
            instance_id = ec2_response['Reservations'][0]['Instances'][0]['InstanceId']
            
            print(f"Testing SSM permission with instance: {instance_id}")
            
            # Try to execute a command that will fail for valid reasons other than permissions
            # This tests if we have the necessary IAM permissions without actually running a command
            try:
                ssm.send_command(
                    InstanceIds=[instance_id],
                    DocumentName='AWS-RunShellScript',
                    Parameters={'commands': ['echo "test"']},
                    TimeoutSeconds=30,
                    MaxConcurrency='1',
                    MaxErrors='0'
                )
                
                # If we get here, we have the permissions for SSM commands
                print("✓ You appear to have SSM permissions.")
                return True
                
            except botocore.exceptions.ClientError as e:
                error_code = e.response.get('Error', {}).get('Code')
                error_msg = str(e)
                
                if 'AccessDenied' in error_msg or error_code == 'AccessDeniedException':
                    print("✗ You don't have permission to use SSM.")
                    print(f"\nYou need ssm:StartSession permission to connect to EC2 instances.")
                    print(f"Error message: {error_msg}")
                    print(f"\nYou may need to switch to a profile with more permissions. Try:")
                    print(f"  export AWS_PROFILE=<profile_name>")
                    print(f"  # or")
                    print(f"  aws sso login --profile <profile_name>")
                    
                    profiles = list_aws_profiles()
                    if profiles:
                        print("\nAvailable AWS profiles:")
                        for p in profiles:
                            print(f"  {p}")
                    
                    try:
                        if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                            sys.exit(1)
                    except KeyboardInterrupt:
                        print("\nOperation cancelled by user. Exiting.")
                        sys.exit(0)
                    return False
                elif 'InvalidInstanceId' in error_msg:
                    # Instance might not have SSM agent, but we have permission
                    print("✓ You appear to have SSM permissions (but instance might not be SSM-enabled).")
                    return True
                else:
                    print(f"Warning: Unexpected error checking SSM permissions: {error_msg}")
                    return True  # Continue anyway
        
        except botocore.exceptions.ClientError as e:
            print(f"Warning: Could not list EC2 instances: {str(e)}")
            print("You may encounter issues when trying to establish an SSM session.")
            try:
                if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                    sys.exit(1)
            except KeyboardInterrupt:
                print("\nOperation cancelled by user. Exiting.")
                sys.exit(0)
            return False
            
    except botocore.exceptions.ClientError as e:
        print(f"AWS Access Error: {str(e)}")
        print(f"\nYou may need to switch AWS profiles. Try:")
        print(f"  export AWS_PROFILE=<profile_name>")
        print(f"  # or")
        print(f"  aws sso login --profile <profile_name>")
        
        profiles = list_aws_profiles()
        if profiles:
            print("\nAvailable AWS profiles:")
            for p in profiles:
                print(f"  {p}")
                
        try:
            if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                sys.exit(1)
        except KeyboardInterrupt:
            print("\nOperation cancelled by user. Exiting.")
            sys.exit(0)
        return False

def list_aws_profiles():
    """List available AWS profiles in credentials and config files"""
    profiles = set()
    
    # Check ~/.aws/credentials
    cred_path = os.path.expanduser("~/.aws/credentials")
    if os.path.exists(cred_path):
        with open(cred_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile != 'default' and not profile.startswith('profile '):
                        profiles.add(profile)
    
    # Check ~/.aws/config
    config_path = os.path.expanduser("~/.aws/config")
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile.startswith('profile '):
                        profiles.add(profile[8:])  # Remove 'profile ' prefix
    
    return sorted(list(profiles))

def get_instances(search_term):
    ec2 = boto3.client('ec2')
    instances = ec2.describe_instances(
        Filters=[
            {'Name': 'instance-state-name', 'Values': ['running']}
        ]
    )['Reservations']

    result = []
    for reservation in instances:
        for instance in reservation['Instances']:
            instance_tags = instance.get('Tags', [])
            instance_name = next((tag['Value'] for tag in instance_tags if tag['Key'] == 'Name'), '')
            if (search_term in instance['InstanceId'] or
                search_term in instance_name or
                any(search_term in tag['Value'] for tag in instance_tags)):
                instance_info = {
                    'id': instance['InstanceId'],
                    'name': instance_name or 'N/A',
                    'tags': {tag['Key']: tag['Value'] for tag in instance_tags}
                }
                result.append(instance_info)

    return result

def select_instance(instances, search_term):
    choices = []

    # Chop menu items at screen width minus 5 chars
    max_name_length = os.get_terminal_size().columns - 5

    for instance in instances:
        # Sort matching tags by key to ensure consistent ordering
        matching_tags = {key: value for key, value in instance['tags'].items() if search_term in value}
        sorted_matching_tags = dict(sorted(matching_tags.items()))
        menu_option = f"{instance['id']} - {instance['name']} - {sorted_matching_tags}"
        choices.append(menu_option[:max_name_length])

    questions = [
        inquirer.List('selected_instance',
                      message="Which instance do you want to connect to?",
                      choices=choices)
    ]
    try:
        answers = inquirer.prompt(questions)
        if answers is None:
            print("\nSelection cancelled. Exiting.")
            sys.exit(0)
        return answers['selected_instance']
    except KeyboardInterrupt:

        sys.exit(0)

def connect_to_instance(instance_id):
    print("Starting session with command: aws ssm start-session --target " + instance_id)
    os.execvp('aws', ['aws', 'ssm', 'start-session', '--target', instance_id])

def main():
    # print usage if no search term is provided
    if len(sys.argv) < 2:
        print("Usage: aws_ec2_ssm_instance_connect <search_term>")
        return

    # Check AWS access and SSM permissions before proceeding
    check_aws_access()
    
    # get search term from first CLI arg
    search_term = sys.argv[1]
    
    instances = get_instances(search_term)

    if not instances:
        print("No instances found matching the search term.")
        return

    selected_instance = select_instance(instances, search_term)

    instance_id = selected_instance.split(' - ')[0]
    connect_to_instance(instance_id)

if __name__ == "__main__":
    main()
