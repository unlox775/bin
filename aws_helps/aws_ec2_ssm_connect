#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import botocore.exceptions
import argparse

# Import only AWSCommon since this script doesn't do port forwarding
from lib.aws_common import AWSCommon

# Initialize AWSCommon
aws_common = AWSCommon()

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    # Use AWSCommon for credential checking
    if not aws_common.check_aws_credentials():
        return False
    
    # Now check SSM access
    ssm = boto3.client('ssm')
    ec2 = boto3.client('ec2')
    
    print("Checking SSM session permissions...")
    
    # Find any running instance ID to test against
    try:
        ec2_response = ec2.describe_instances(
            Filters=[{'Name': 'instance-state-name', 'Values': ['running']}],
            MaxResults=10
        )
        
        if not ec2_response.get('Reservations') or len(ec2_response['Reservations']) == 0:
            print("Warning: No running EC2 instances found. Cannot verify SSM permissions.")
            print("You may encounter issues when trying to establish an SSM session.")
            return True  # Continue anyway
            
        instance_id = ec2_response['Reservations'][0]['Instances'][0]['InstanceId']
        
        print(f"Testing SSM permission with instance: {instance_id}")
        
        # Try to execute a command that will fail for valid reasons other than permissions
        try:
            ssm.send_command(
                InstanceIds=[instance_id],
                DocumentName='AWS-RunShellScript',
                Parameters={'commands': ['echo "test"']},
                TimeoutSeconds=30,
                MaxConcurrency='1',
                MaxErrors='0'
            )
            
            # If we get here, we have the permissions for SSM commands
            print("✓ You appear to have SSM permissions.")
            return True
            
        except botocore.exceptions.ClientError as e:
            error_code = e.response.get('Error', {}).get('Code')
            error_msg = str(e)
            
            if 'AccessDenied' in error_msg or error_code == 'AccessDeniedException':
                print("✗ You don't have permission to use SSM.")
                print(f"\nYou need ssm:StartSession permission to connect to EC2 instances.")
                print(f"Error message: {error_msg}")
                print(f"\nYou may need to switch to a profile with more permissions. Try:")
                print(f"  export AWS_PROFILE=<profile_name>")
                print(f"  # or")
                print(f"  aws sso login --profile <profile_name>")
                
                profiles = aws_common.list_aws_profiles()
                if profiles:
                    print("\nAvailable AWS profiles:")
                    for p in profiles:
                        print(f"  {p}")
                
                try:
                    if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                        sys.exit(1)
                except KeyboardInterrupt:
                    print("\nOperation cancelled by user. Exiting.")
                    sys.exit(0)
                return False
            elif 'InvalidInstanceId' in error_msg:
                # Instance might not have SSM agent, but we have permission
                print("✓ You appear to have SSM permissions (but instance might not be SSM-enabled).")
                return True
            else:
                print(f"Warning: Unexpected error checking SSM permissions: {error_msg}")
                return True  # Continue anyway
    
    except botocore.exceptions.ClientError as e:
        print(f"Warning: Could not list EC2 instances: {str(e)}")
        print("You may encounter issues when trying to establish an SSM session.")
        try:
            if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                sys.exit(1)
        except KeyboardInterrupt:
            print("\nOperation cancelled by user. Exiting.")
            sys.exit(0)
        return False

def get_instances(search_term):
    """Get EC2 instances matching the search term"""
    ec2 = boto3.client('ec2')
    instances = ec2.describe_instances(
        Filters=[
            {'Name': 'instance-state-name', 'Values': ['running']}
        ]
    )['Reservations']

    result = []
    for reservation in instances:
        for instance in reservation['Instances']:
            instance_tags = instance.get('Tags', [])
            instance_name = next((tag['Value'] for tag in instance_tags if tag['Key'] == 'Name'), '')
            if (search_term in instance['InstanceId'] or
                search_term in instance_name or
                any(search_term in tag['Value'] for tag in instance_tags)):
                instance_info = {
                    'id': instance['InstanceId'],
                    'name': instance_name or 'N/A',
                    'tags': {tag['Key']: tag['Value'] for tag in instance_tags}
                }
                result.append(instance_info)

    return result

def select_instance(instances, search_term):
    """Select an EC2 instance from the filtered list"""
    if not instances:
        print("No instances found matching the search term.")
        sys.exit(1)
    
    choices = []

    # Chop menu items at screen width minus 5 chars
    max_name_length = os.get_terminal_size().columns - 5

    for instance in instances:
        # Sort matching tags by key to ensure consistent ordering
        matching_tags = {key: value for key, value in instance['tags'].items() if search_term in value}
        sorted_matching_tags = dict(sorted(matching_tags.items()))
        menu_option = f"{instance['id']} - {instance['name']} - {sorted_matching_tags}"
        choices.append(menu_option[:max_name_length])

    questions = [
        inquirer.List('selected_instance',
                      message="Which instance do you want to connect to?",
                      choices=choices)
    ]
    try:
        answers = inquirer.prompt(questions)
        if answers is None:
            print("\nSelection cancelled. Exiting.")
            sys.exit(0)
        return answers['selected_instance']
    except KeyboardInterrupt:
        print("\nOperation cancelled by user. Exiting.")
        sys.exit(0)

def connect_to_instance(instance_id):
    """Connect to the selected EC2 instance via SSM"""
    print("Starting session with command: aws ssm start-session --target " + instance_id)
    os.execvp('aws', ['aws', 'ssm', 'start-session', '--target', instance_id])

def main():
    parser = argparse.ArgumentParser(
        description='''Interactive EC2 instance connection tool using AWS Systems Manager.

This tool provides an interactive way to connect to EC2 instances using AWS Systems Manager (SSM) 
sessions. It searches for running instances by ID, name, or tags and presents an interactive 
menu for selection, then establishes an SSM session connection.

Key use cases:
- Interactive server access: Quickly find and connect to EC2 instances
- Tag-based discovery: Search instances by environment, role, or other tags
- Secure access: Use SSM sessions instead of SSH keys or bastion hosts
- Troubleshooting: Connect to instances for debugging or maintenance
- Multi-account management: Work across different AWS accounts and regions

The tool validates AWS credentials and SSM permissions before attempting connections, provides 
helpful error messages for permission issues, and supports searching by instance ID, name, 
or any tag value. It automatically handles AWS profile selection and credential validation.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('search_term', help='Search term to match instance ID, name, or tags')
    args = parser.parse_args()

    # Check AWS access and SSM permissions before proceeding
    check_aws_access()
    
    # Get search term from first CLI arg
    search_term = args.search_term
    
    instances = get_instances(search_term)

    if not instances:
        print("No instances found matching the search term.")
        return

    selected_instance = select_instance(instances, search_term)

    instance_id = selected_instance.split(' - ')[0]
    connect_to_instance(instance_id)

if __name__ == "__main__":
    main()
