#!/usr/bin/env python3

import boto3
import sys
import os
import argparse

def list_secrets(region, profile):
    # Set up boto3 session using provided profile
    session = boto3.Session(profile_name=profile, region_name=region)
    
    # Create a client for the Secrets Manager service
    secrets_client = session.client('secretsmanager')
    
    secrets = []
    next_token = None

    # Get the list of secrets
    while True:
        if next_token:
            response = secrets_client.list_secrets(NextToken=next_token)
        else:
            response = secrets_client.list_secrets()
        
        secrets.extend(response.get('SecretList', []))

        next_token = response.get('NextToken')
        if not next_token:
            break
    
    return secrets


def main():
    parser = argparse.ArgumentParser(
        description='''AWS Secrets Manager inventory and listing tool.

This tool lists all secrets in AWS Secrets Manager for a specified region and profile, 
providing key metadata including names, descriptions, and last accessed dates. It's designed 
for security audits, inventory management, and compliance reporting.

Key use cases:
- Security audits: Inventory all secrets in an AWS account
- Compliance reporting: Document secret usage and access patterns
- Secret management: Identify unused or outdated secrets
- Access monitoring: Track when secrets were last accessed
- Cleanup operations: Find secrets that may be candidates for deletion

The tool provides a comprehensive view of all secrets including their metadata, making it 
easy to understand the scope and usage of sensitive data stored in Secrets Manager.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('region', help='AWS region (default: us-east-1)', nargs='?', default='us-east-1')
    parser.add_argument('profile', help='AWS profile name (default: default)', nargs='?', default='default')
    args = parser.parse_args()

    region = args.region
    profile = args.profile

    os.environ['AWS_PROFILE'] = profile
    os.environ['AWS_REGION'] = region
    
    secrets = list_secrets(region, profile)
    
    if not secrets:
        print(f"No secrets found in region {region} for profile {profile}.")
        return
    
    print(f"Secrets in region {region} for profile {profile}:")
    for secret in secrets:
        secret_name = secret.get('Name', 'N/A')
        description = secret.get('Description', 'N/A')
        last_accessed_date = secret.get('LastAccessedDate', 'N/A')
        # ... Add more attributes as needed
        print(f"Name: {secret_name}, Description: {description}, Last Accessed Date: {last_accessed_date}")

if __name__ == '__main__':
    main()
