#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import signal
import subprocess
import botocore.exceptions
import argparse

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    profile = os.environ.get('AWS_PROFILE', os.environ.get('AWS_DEFAULT_PROFILE', 'default'))
    print(f"Using AWS profile: {profile}")
    try:
        sts = boto3.client('sts')
        identity = sts.get_caller_identity()
        account_id = identity['Account']
        username = identity['Arn'].split('/')[-1]
        print(f"Authenticated as {username} in account {account_id}")
        ssm = boto3.client('ssm')
        ec2 = boto3.client('ec2')
        print("Checking SSM session permissions...")
        try:
            ec2_response = ec2.describe_instances(
                Filters=[{'Name': 'instance-state-name', 'Values': ['running']}],
                MaxResults=10
            )
            if not ec2_response.get('Reservations') or len(ec2_response['Reservations']) == 0:
                print("Warning: No running EC2 instances found. Cannot verify SSM permissions.")
                print("You may encounter issues when trying to establish port forwarding.")
                return True
            instance_id = ec2_response['Reservations'][0]['Instances'][0]['InstanceId']
            try:
                print(f"Testing SSM permission with instance: {instance_id}")
                ssm.send_command(
                    InstanceIds=[instance_id],
                    DocumentName='AWS-RunShellScript',
                    Parameters={'commands': ['echo \"test\"']},
                    TimeoutSeconds=30,
                    MaxConcurrency='1',
                    MaxErrors='0'
                )
                print("✓ You appear to have SSM permissions.")
                return True
            except botocore.exceptions.ClientError as e:
                error_code = e.response.get('Error', {}).get('Code')
                error_msg = str(e)
                if 'AccessDenied' in error_msg or error_code == 'AccessDeniedException':
                    print("✗ You don't have permission to use SSM.")
                    print(f"\nYou need ssm:StartSession permission to use port forwarding.")
                    print(f"Error message: {error_msg}")
                    print(f"\nYou may need to switch to a profile with more permissions. Try:")
                    print(f"  export AWS_PROFILE=<profile_name>")
                    print(f"  # or")
                    print(f"  aws sso login --profile <profile_name>")
                    profiles = list_aws_profiles()
                    if profiles:
                        print("\nAvailable AWS profiles:")
                        for p in profiles:
                            print(f"  {p}")
                    try:
                        if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                            sys.exit(1)
                    except KeyboardInterrupt:
                        print("\nOperation cancelled by user. Exiting.")
                        sys.exit(0)
                    return False
                elif 'InvalidInstanceId' in error_msg:
                    print("✓ You appear to have SSM permissions (but instance might not be SSM-enabled).")
                    return True
                else:
                    print(f"Warning: Unexpected error checking SSM permissions: {error_msg}")
                    return True
        except botocore.exceptions.ClientError as e:
            print(f"Warning: Could not list EC2 instances: {str(e)}")
            print("You may encounter issues when trying to establish port forwarding.")
            try:
                if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                    sys.exit(1)
            except KeyboardInterrupt:
                print("\nOperation cancelled by user. Exiting.")
                sys.exit(0)
            return False
    except botocore.exceptions.ClientError as e:
        print(f"AWS Access Error: {str(e)}")
        print(f"\nYou may need to switch AWS profiles. Try:")
        print(f"  export AWS_PROFILE=<profile_name>")
        print(f"  # or")
        print(f"  aws sso login --profile <profile_name>")
        profiles = list_aws_profiles()
        if profiles:
            print("\nAvailable AWS profiles:")
            for p in profiles:
                print(f"  {p}")
        try:
            if input("\nWould you like to try continuing anyway? (y/N): ").lower() != 'y':
                sys.exit(1)
        except KeyboardInterrupt:
            print("\nOperation cancelled by user. Exiting.")
            sys.exit(0)
        return False

def list_aws_profiles():
    profiles = set()
    cred_path = os.path.expanduser("~/.aws/credentials")
    if os.path.exists(cred_path):
        with open(cred_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile != 'default' and not profile.startswith('profile '):
                        profiles.add(profile)
    config_path = os.path.expanduser("~/.aws/config")
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            for line in f:
                if line.strip().startswith('[') and line.strip().endswith(']'):
                    profile = line.strip()[1:-1]
                    if profile.startswith('profile '):
                        profiles.add(profile[8:])
    return sorted(list(profiles))

def get_memcache_clusters(search_term):
    elasticache = boto3.client('elasticache')
    response = elasticache.describe_cache_clusters(ShowCacheNodeInfo=True)
    search_term_lower = search_term.lower()
    result = []
    for cluster in response['CacheClusters']:
        if cluster['Engine'].lower() != 'memcached':
            continue
        cluster_id = cluster['CacheClusterId']
        endpoint = cluster.get('ConfigurationEndpoint', {}).get('Address')
        port = cluster.get('ConfigurationEndpoint', {}).get('Port')
        if not endpoint or not port:
            continue
        if any([
            search_term_lower in cluster_id.lower(),
            search_term_lower in endpoint.lower(),
        ]):
            result.append({
                'id': cluster_id,
                'endpoint': endpoint,
                'port': port,
            })
    return result

def select_memcache_cluster(clusters):
    if not clusters:
        print("No Memcache clusters found matching the search term.")
        sys.exit(1)
    choices = [f"{c['id']} - {c['endpoint']} (port {c['port']})" for c in clusters]
    questions = [
        inquirer.List('selected_instance',
                      message="Which Memcache cluster do you want to connect to?",
                      choices=choices)
    ]
    answers = inquirer.prompt(questions)
    if answers is None:
        print("\nSelection cancelled. Exiting.")
        sys.exit(0)
    selected_index = choices.index(answers['selected_instance'])
    return clusters[selected_index]

def find_available_ec2(region):
    ssm = boto3.client('ssm')
    ec2 = boto3.client('ec2')
    try:
        response = ssm.describe_instance_information()
        if not response['InstanceInformationList']:
            print("No EC2 instances with SSM agent found. Unable to create tunnel.")
            sys.exit(1)
        instance_id = response['InstanceInformationList'][0]['InstanceId']
        instance_details = ec2.describe_instances(InstanceIds=[instance_id])
        instance_name = "Unknown"
        for tag in instance_details['Reservations'][0]['Instances'][0].get('Tags', []):
            if tag['Key'] == 'Name':
                instance_name = tag['Value']
                break
        print(f"Using EC2 instance {instance_id} ({instance_name}) as tunnel endpoint")
        return instance_id
    except Exception as e:
        print(f"Error finding available EC2 instance: {str(e)}")
        sys.exit(1)

def setup_port_forwarding(memcache_endpoint, memcache_port, local_port=None):
    if local_port is None:
        local_port = 11211
    region = boto3.session.Session().region_name
    instance_id = find_available_ec2(region)
    print(f"\nSetting up Memcache port forwarding through SSM:")
    print(f"  Local port:     {local_port}")
    print(f"  Memcache endpoint:   {memcache_endpoint}")
    print(f"  Memcache port:       {memcache_port}")
    print("\nConnect using:")
    print(f"  memcached-tool 127.0.0.1:{local_port} stats")
    print("\nPort forwarding active. Press Ctrl+C to quit.\n")
    cmd = [
        "aws", "ssm", "start-session",
        "--target", instance_id,
        "--document-name", "AWS-StartPortForwardingSessionToRemoteHost",
        "--parameters", f"localPortNumber={local_port},host={memcache_endpoint},portNumber={memcache_port}"
    ]
    def signal_handler(sig, frame):
        print("\nPort forwarding stopped.")
        sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)
    subprocess.run(cmd)

def main():
    parser = argparse.ArgumentParser(
        description='''Memcache port forwarding tool using AWS Systems Manager.

This tool establishes secure port forwarding to Memcache clusters through AWS Systems 
Manager (SSM), allowing local cache access without requiring VPN or bastion hosts. 
It searches for Memcache clusters in ElastiCache and provides an interactive selection menu.

Key use cases:
- Cache access: Connect to Memcache clusters from local development environments
- Secure tunneling: Access private Memcache clusters without VPN or public endpoints
- Development: Local cache connections for application development
- Troubleshooting: Direct cache access for debugging and maintenance
- Multi-account access: Connect to Memcache clusters across different AWS accounts

The tool validates AWS credentials and SSM permissions, searches for Memcache clusters 
in ElastiCache by name or endpoint, and establishes port forwarding through an available 
EC2 instance with SSM agent. It provides connection examples for cache management tools.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('search_term', help='Search term to match Memcache cluster names or endpoints')
    parser.add_argument('local_port', help='Local port for forwarding (default: 11211)', nargs='?', type=int, default=11211)
    args = parser.parse_args()
    
    search_term = args.search_term
    local_port = args.local_port
    check_aws_access()
    clusters = get_memcache_clusters(search_term)
    selected = select_memcache_cluster(clusters)
    setup_port_forwarding(selected['endpoint'], selected['port'], local_port)

if __name__ == "__main__":
    main() 