#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import signal
import subprocess
import botocore.exceptions
import argparse

# Import the new library classes
from lib.ec2_proxy import EC2Proxy
from lib.aws_common import AWSCommon

# Initialize the library classes
ec2_proxy = EC2Proxy()
aws_common = AWSCommon()

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    # Use the EC2 proxy's SSM access check which includes environment variable support
    return ec2_proxy.check_aws_ssm_access()

def get_memcache_clusters(search_term):
    elasticache = boto3.client('elasticache')
    response = elasticache.describe_cache_clusters(ShowCacheNodeInfo=True)
    search_term_lower = search_term.lower()
    result = []
    for cluster in response['CacheClusters']:
        if cluster['Engine'].lower() != 'memcached':
            continue
        cluster_id = cluster['CacheClusterId']
        endpoint = cluster.get('ConfigurationEndpoint', {}).get('Address')
        port = cluster.get('ConfigurationEndpoint', {}).get('Port')
        if not endpoint or not port:
            continue
        if any([
            search_term_lower in cluster_id.lower(),
            search_term_lower in endpoint.lower(),
        ]):
            result.append({
                'id': cluster_id,
                'endpoint': endpoint,
                'port': port,
            })
    return result

def select_memcache_cluster(clusters):
    if not clusters:
        print("No Memcache clusters found matching the search term.")
        sys.exit(1)
    choices = [f"{c['id']} - {c['endpoint']} (port {c['port']})" for c in clusters]
    questions = [
        inquirer.List('selected_instance',
                      message="Which Memcache cluster do you want to connect to?",
                      choices=choices)
    ]
    answers = inquirer.prompt(questions)
    if answers is None:
        print("\nSelection cancelled. Exiting.")
        sys.exit(0)
    selected_index = choices.index(answers['selected_instance'])
    return clusters[selected_index]

def setup_port_forwarding(memcache_endpoint, memcache_port, local_port=None):
    """Setup port forwarding using an EC2 instance with SSM"""
    # Print Memcache-specific connection info
    print(f"\nConnect using:")
    print(f"  memcached-tool 127.0.0.1:{local_port} stats")
    
    # Use the EC2 proxy's port forwarding with Memcache-specific connection info
    ec2_proxy.setup_port_forwarding(
        target_host=memcache_endpoint,
        target_port=memcache_port,
        local_port=local_port,
        service_name="Memcache"
    )

def main():
    parser = argparse.ArgumentParser(
        description='''Memcache port forwarding tool using AWS Systems Manager.

This tool establishes secure port forwarding to Memcache clusters through AWS Systems 
Manager (SSM), allowing local cache access without requiring VPN or bastion hosts. 
It searches for Memcache clusters in ElastiCache and provides an interactive selection menu.

Key use cases:
- Cache access: Connect to Memcache clusters from local development environments
- Secure tunneling: Access private Memcache clusters without VPN or public endpoints
- Development: Local cache connections for application development
- Troubleshooting: Direct cache access for debugging and maintenance
- Multi-account access: Connect to Memcache clusters across different AWS accounts

The tool validates AWS credentials and SSM permissions, searches for Memcache clusters 
in ElastiCache by name or endpoint, and establishes port forwarding through an available 
EC2 instance with SSM agent. It provides connection examples for cache management tools.

Environment Variables:
- AWS_SSM_DEFAULT_EC2_INSTANCE: Set to an EC2 instance ID to skip instance selection
  Example: export AWS_SSM_DEFAULT_EC2_INSTANCE=i-1234567890abcdef0
- AWS_SSM_DEFAULT_EC2_NAME: Set to an instance name or stack name to skip instance selection
  Example: export AWS_SSM_DEFAULT_EC2_NAME=my-instance-name''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('search_term', help='Search term to match Memcache cluster names or endpoints')
    parser.add_argument('local_port', help='Local port for forwarding (default: 11211)', nargs='?', type=int, default=11211)
    args = parser.parse_args()
    
    search_term = args.search_term
    local_port = args.local_port
    check_aws_access()
    clusters = get_memcache_clusters(search_term)
    selected = select_memcache_cluster(clusters)
    setup_port_forwarding(selected['endpoint'], selected['port'], local_port)

if __name__ == "__main__":
    main() 