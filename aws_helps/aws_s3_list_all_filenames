#!/usr/bin/env python3

import boto3
import sys
import os
import argparse
from urllib.parse import urlparse

def list_files(bucket_name, prefix):
    s3 = boto3.client('s3')
    paginator = s3.get_paginator('list_objects_v2')

    page_iterator = paginator.paginate(Bucket=bucket_name, Prefix=prefix)

    for page in page_iterator:
        for obj in page.get('Contents', []):  # Safeguard for empty contents
            print(obj['Key'])

def parse_s3_url(s3_url):
    parsed_url = urlparse(s3_url)
    if parsed_url.scheme != 's3':
        raise ValueError("URL must be an S3 URL starting with s3://")
    bucket_name = parsed_url.netloc
    prefix = parsed_url.path.lstrip('/')  # Remove leading slash for correct prefix
    return bucket_name, prefix

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='''S3 bucket file enumeration and listing tool.

This tool lists all files in an S3 bucket or prefix, providing a complete inventory 
of objects stored in S3. It supports pagination to handle large buckets and can 
filter by prefix to focus on specific directories or file patterns.

Key use cases:
- File inventory: Get complete lists of files in S3 buckets
- Backup verification: Verify file presence and structure
- Data analysis: Understand file distribution and patterns
- Cleanup operations: Identify files for deletion or archival
- Migration planning: Document file structures for data migration

The tool uses S3's pagination API to efficiently handle buckets with millions of 
objects and provides simple, clean output suitable for further processing or analysis. 
It supports S3 URL format for easy specification of bucket and prefix combinations.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('profile_name', help='AWS profile name')
    parser.add_argument('region', help='AWS region')
    parser.add_argument('s3_url', help='S3 URL (e.g., s3://bucket-name/prefix/)')
    args = parser.parse_args()

    profile_name = args.profile_name
    region = args.region
    s3_url = args.s3_url

    # Set AWS profile and region environment variables
    os.environ['AWS_PROFILE'] = profile_name
    os.environ['AWS_DEFAULT_REGION'] = region

    # Parse the S3 URL to get the bucket name and prefix
    bucket_name, prefix = parse_s3_url(s3_url)

    # Call list_files with the bucket name and prefix
    list_files(bucket_name, prefix)
