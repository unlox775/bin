#!/usr/bin/env python3

import boto3
import sys
import os
import argparse

def main():
    parser = argparse.ArgumentParser(
        description='''IAM role usage analysis and resource mapping tool.

This tool identifies which AWS resources are using a specific IAM role, including 
EC2 instances and Lambda functions. It's designed for role management, security 
audits, and understanding role dependencies across your AWS infrastructure.

Key use cases:
- Role dependency analysis: Find all resources using a specific role
- Security audits: Understand role usage patterns and permissions
- Cleanup operations: Identify resources before role deletion
- Compliance: Document role usage across services
- Troubleshooting: Understand role assignments and permissions

The tool checks EC2 instances for instance profile usage and Lambda functions for 
execution role assignments, providing a comprehensive view of where a specific role 
is being used across your AWS infrastructure.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('role_name', help='IAM role name to analyze')
    parser.add_argument('region', help='AWS region (default: us-east-1)', nargs='?', default='us-east-1')
    parser.add_argument('profile', help='AWS profile name (default: default)', nargs='?', default='default')
    args = parser.parse_args()

    region_name = args.region
    profile_name = args.profile
    role_name = args.role_name

print(f"Using region: {region_name}, profile: {profile_name}, role: {role_name}")
os.environ['AWS_PROFILE'] = profile_name
os.environ['AWS_REGION'] = region_name

session = boto3.Session(profile_name=profile_name, region_name=region_name)
iam = session.client('iam')

def check_ec2_instances(role_name):
    try:
        instance_profile = iam.get_instance_profile(InstanceProfileName=role_name)
        if not instance_profile:
            print(f"Could not find instance profile: {role_name}")
            return
        instance_profile_arn = instance_profile.get('InstanceProfile', {}).get('Arn', '')
        ec2 = session.resource('ec2')
        instances = ec2.instances.all()
        for instance in instances:
            profile_arn = instance.iam_instance_profile['Arn'] if instance.iam_instance_profile else ''
            # print(f"EC2 Instance: {instance.id} uses role {profile_arn}")
            # print(f"Checking if EC2 Instance: {instance.id} uses role {role_arn}")
            if instance_profile_arn in profile_arn:
                print(f"EC2 Instance: {instance.id} uses role {role_name}")
    except Exception as e:
        print(f"Error checking EC2 instances: {e}")
        return

def check_lambda_functions(role_arn):
    lambda_client = session.client('lambda')
    functions = lambda_client.list_functions()
    for function in functions['Functions']:
        print(f"Checking if Lambda Function: {function['FunctionName']} uses role {role_name}")
        if role_arn == function['Role']:
            print(f"Lambda Function: {function['FunctionName']} uses role {role_name}")

def main():
    role = iam.get_role(RoleName=role_name)
    if not role:
        print(f"Could not find role: {role_name}")
        sys.exit(1)
    role_arn = role['Role']['Arn']

    print(f"Checking for resources using the role: {role_name}")
    check_ec2_instances(role_name)
    check_lambda_functions(role_arn)

if __name__ == '__main__':
    main()
