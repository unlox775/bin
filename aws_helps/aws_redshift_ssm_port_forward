#!/usr/bin/env python3

import inquirer
import boto3
import sys
import os
import signal
import subprocess
import botocore.exceptions
import argparse

# Import the AWS helpers library
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from lib.ec2_proxy import EC2Proxy
from lib.aws_common import AWSCommon

# Initialize AWS helpers
ec2_proxy = EC2Proxy()
aws_common = AWSCommon()

def check_aws_access():
    """Check if we have valid AWS credentials and permissions for SSM sessions"""
    return ec2_proxy.check_aws_ssm_access()

def get_redshift_clusters(search_term):
    """Find Redshift clusters matching the search term"""
    # Get region from environment or AWS config
    region_name = os.environ.get('AWS_REGION') or os.environ.get('AWS_DEFAULT_REGION')
    if region_name:
        redshift = boto3.client('redshift', region_name=region_name)
    else:
        redshift = boto3.client('redshift')
    response = redshift.describe_clusters()
    search_term_lower = search_term.lower()
    result = []
    for cluster in response['Clusters']:
        cluster_id = cluster['ClusterIdentifier']
        endpoint = cluster['Endpoint']['Address']
        port = cluster['Endpoint']['Port']
        db_name = cluster.get('DBName', '')
        master_username = cluster.get('MasterUsername', '')
        tags = {}
        try:
            tag_list = redshift.describe_tags(ResourceName=cluster['ClusterNamespaceArn'])
            tags = {tag['Key']: tag['Value'] for tag in tag_list.get('TaggedResources', [])}
        except Exception:
            pass
        if any([
            search_term_lower in cluster_id.lower(),
            search_term_lower in endpoint.lower(),
            db_name and search_term_lower in db_name.lower(),
            search_term_lower in master_username.lower(),
            any(search_term_lower in value.lower() for value in tags.values()),
            any(search_term_lower in key.lower() for key in tags.keys())
        ]):
            instance_info = {
                'id': cluster_id,
                'endpoint': endpoint,
                'port': port,
                'db_name': db_name if db_name else 'N/A',
                'master_username': master_username,
                'tags': tags
            }
            result.append(instance_info)
    return result

def select_redshift_cluster(redshift_clusters):
    """Present a menu to select a Redshift cluster"""
    if not redshift_clusters:
        print("No Redshift clusters found matching the search term.")
        sys.exit(1)
    
    choices = [f"{instance['id']} - {instance['endpoint']} (port {instance['port']})" for instance in redshift_clusters]
    
    questions = [
        inquirer.List('selected_instance',
                      message="Which Redshift cluster do you want to connect to?",
                      choices=choices)
    ]
    
    try:
        answers = inquirer.prompt(questions)
        if answers is None:
            print("\nSelection cancelled. Exiting.")
            sys.exit(0)
        selected_index = choices.index(answers['selected_instance'])
        return redshift_clusters[selected_index]
    except KeyboardInterrupt:
        print("\nOperation cancelled. Exiting.")
        sys.exit(0)

def setup_port_forwarding(redshift_endpoint, redshift_port, local_port=None):
    """Setup port forwarding using an EC2 instance with SSM"""
    # Print Redshift-specific connection info
    print(f"\nConnect using:")
    print(f"  psql -h 127.0.0.1 -p {local_port} -U <username> <database>")
    
    # Use the EC2 proxy's port forwarding with Redshift-specific connection info
    ec2_proxy.setup_port_forwarding(
        target_host=redshift_endpoint,
        target_port=redshift_port,
        local_port=local_port,
        service_name="Redshift"
    )

def main():
    parser = argparse.ArgumentParser(
        description='''Redshift port forwarding tool using AWS Systems Manager.

This tool establishes secure port forwarding to Redshift clusters through AWS Systems 
Manager (SSM), allowing local database connections without requiring VPN or bastion hosts. 
It searches for Redshift clusters and provides an interactive selection menu.

Key use cases:
- Database access: Connect to Redshift clusters from local development environments
- Secure tunneling: Access private Redshift clusters without VPN or public endpoints
- Development: Local database connections for data analysis and development
- Troubleshooting: Direct database access for debugging and maintenance
- Multi-account access: Connect to Redshift clusters across different AWS accounts

The tool validates AWS credentials and SSM permissions, searches for Redshift clusters 
by name or tags, and establishes port forwarding through an available EC2 instance with 
SSM agent. It provides connection strings for local database clients like psql.

Environment Variables:
- AWS_SSM_DEFAULT_EC2_INSTANCE: Set to an EC2 instance ID to skip instance selection
  Example: export AWS_SSM_DEFAULT_EC2_INSTANCE=i-1234567890abcdef0
- AWS_SSM_DEFAULT_EC2_NAME: Set to an instance name or stack name to skip instance selection
  Example: export AWS_SSM_DEFAULT_EC2_NAME=my-instance-name
  Example: export AWS_SSM_DEFAULT_EC2_NAME=my-stack-name''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('search_term', help='Search term to match Redshift cluster names, tags, or endpoints')
    parser.add_argument('local_port', help='Local port for forwarding (default: 15432)', nargs='?', type=int, default=15432)
    args = parser.parse_args()

    # Get search term from first CLI arg
    search_term = args.search_term
    
    # Get optional local port from second CLI arg
    local_port = args.local_port
    if local_port < 1024 or local_port > 65535:
        print("ERROR: Local port must be between 1024 and 65535")
        sys.exit(1)
    
    # Check AWS access before proceeding - this now checks SSM permissions too
    check_aws_access()
    
    # Find RDS instances matching the search term
    print(f"Searching for Redshift clusters matching: {search_term}")
    redshift_clusters = get_redshift_clusters(search_term)
    
    if not redshift_clusters:
        print("No Redshift clusters found matching the search term.")
        sys.exit(1)
    
    # Let user select a Redshift cluster
    selected_redshift = select_redshift_cluster(redshift_clusters)
    
    # Setup port forwarding to Redshift through an EC2 instance
    setup_port_forwarding(
        selected_redshift['endpoint'],
        selected_redshift['port'],
        local_port
    )

if __name__ == "__main__":
    main() 