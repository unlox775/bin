#!/usr/bin/env python3
import os
import sys
import boto3
import time
import csv
import signal
import argparse
from botocore.exceptions import ClientError

def handle_sigint(signum, frame):
    print("Cancelling the query...", file=sys.stderr)
    try:
        response = client.stop_query_execution(QueryExecutionId=query_execution_id)
        print("Query cancelled.", file=sys.stderr)
    except ClientError as e:
        print(f"Error cancelling query: {e}", file=sys.stderr)
    sys.exit(1)

def run_athena_query(client, database, query, s3_output):
    return client.start_query_execution(
        QueryString=query,
        QueryExecutionContext={
            'Database': database
        },
        ResultConfiguration={
            'OutputLocation': s3_output,
        }
    )

def wait_for_query_to_complete(client, query_execution_id):
    while True:
        response = client.get_query_execution(QueryExecutionId=query_execution_id)
        if response['QueryExecution']['Status']['State'] in ['FAILED', 'CANCELLED']:
            raise Exception(f"Query failed to run with error: {response['QueryExecution']['Status']['StateChangeReason']}")
        elif response['QueryExecution']['Status']['State'] == 'SUCCEEDED':
            print("Query completed successfully.", file=sys.stderr)
            return response['QueryExecution']['ResultConfiguration']['OutputLocation']
        time.sleep(5)

def download_and_print_results(s3_path):
    s3 = boto3.client('s3')
    bucket, key = s3_path.replace("s3://", "").split("/", 1)
    obj = s3.get_object(Bucket=bucket, Key=key)
    lines = obj['Body'].read().decode('utf-8').splitlines()
    csv_reader = csv.reader(lines)

    csv_writer = csv.writer(sys.stdout)
    for row in csv_reader:
        csv_writer.writerow(row)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='''AWS Athena query execution and result streaming tool.

This tool executes SQL queries against AWS Athena and streams the results directly to stdout 
in CSV format. It handles query lifecycle management including execution, monitoring, and 
result retrieval, making it ideal for integration with data pipelines and analysis tools.

Key use cases:
- Data analysis: Execute SQL queries and stream results for processing
- ETL pipelines: Integrate Athena queries into data workflows
- Reporting: Generate reports from S3 data through Athena
- Interactive analysis: Quick query execution with immediate results
- Automation: Script Athena queries for scheduled data processing

The tool reads SQL queries from stdin, executes them against the specified database, monitors 
execution progress, and streams results as CSV to stdout. It supports query cancellation via 
SIGINT and reads S3 output location from the AWS_ATHENA_RESULTS_BUCKET environment variable.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('aws_profile', help='AWS profile name to use')
    parser.add_argument('region', help='AWS region for Athena service')
    parser.add_argument('database', help='Athena database name to query')
    args = parser.parse_args()

    aws_profile, region, database = args.aws_profile, args.region, args.database
    session = boto3.Session(profile_name=aws_profile, region_name=region)
    client = session.client('athena')

    signal.signal(signal.SIGINT, handle_sigint)

    try:
        query = sys.stdin.read()

        # Determine the S3 output bucket for results
        s3_output = os.environ.get('AWS_ATHENA_RESULTS_BUCKET',
                                   f's3://aws-athena-query-results-{session.client("sts").get_caller_identity().get("Account")}-{region}/')

        print("Starting query...", file=sys.stderr)
        result = run_athena_query(client, database, query, s3_output)
        query_execution_id = result['QueryExecutionId']

        result_location = wait_for_query_to_complete(client, query_execution_id)

        # Download results and print to STDOUT
        download_and_print_results(result_location)

    except ClientError as e:
        print(f"An error occurred: {e}", file=sys.stderr)
