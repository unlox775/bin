#!/usr/bin/env python3

import boto3
import sys
import os
import json

def list_secrets(secrets_client):
        
    secrets = []
    next_token = None

    # Get the list of secrets
    while True:
        if next_token:
            response = secrets_client.list_secrets(NextToken=next_token)
        else:
            response = secrets_client.list_secrets()
        
        secrets.extend(response.get('SecretList', []))

        next_token = response.get('NextToken')
        if not next_token:
            break
    
    return secrets

def check_replication(secrets_client, secret_name):
    try:
        response = secrets_client.describe_secret(SecretId=secret_name)
        replication_status = response.get('ReplicationStatus', [])
        if replication_status:
            return [status['Region'] for status in replication_status]
        return None
    except Exception as e:
        print(f"Error checking replication for secret {secret_name}: {e}")
        # exit python here
        sys.exit(1)
        return None

def check_cross_account_access(secrets_client, secret_name):
    # try:
    response = secrets_client.get_resource_policy(SecretId=secret_name)
    # If no ResourcePolicy key, then no resource policy exists
    if 'ResourcePolicy' not in response:
        return "No resource policy"
    policy = json.loads(response['ResourcePolicy'])
    for statement in policy.get('Statement', []):
        principal = statement.get('Principal')
        if principal and ('AWS' in principal) and (isinstance(principal['AWS'], str) and ':' in principal['AWS']):
            return principal['AWS']
    return "No external access"
    # except secrets_client.exceptions.ResourceNotFoundException:
    #     # Secret has no resource policy
    #     return "No resource policy"
    # except Exception as e:
    #     print(f"Error checking resource policy for secret {secret_name}: {e}")
    #     # exit python here
    #     sys.exit(1)
    #     return "Error checking policy"
    
def main():
    # Check command line arguments
    if len(sys.argv) < 2:
        print("Usage: aws_secrets_ls <region> [profile]")
        sys.exit(1)

    region = sys.argv[1] if len(sys.argv) > 1 else 'us-east-1'
    profile = sys.argv[2] if len(sys.argv) > 2 else 'default'

    # Set up boto3 session using provided profile
    session = boto3.Session(profile_name=profile, region_name=region)

    secrets_client = session.client('secretsmanager')

    os.environ['AWS_PROFILE'] = profile
    os.environ['AWS_REGION'] = region
    
    secrets = list_secrets(secrets_client)
    
    if not secrets:
        print(f"No secrets found in region {region} for profile {profile}.")
        return
    
    print(f"Secrets in region {region} for profile {profile}:")
    for secret in secrets:
        secret_name = secret.get('Name', 'N/A')
        description = secret.get('Description', 'N/A')
        last_accessed_date = secret.get('LastAccessedDate', 'N/A')

        print(f"Name: {secret_name}, Description: {description}, Last Accessed Date: {last_accessed_date}")

        # Check replication status
        replication_regions = check_replication(secrets_client, secret_name)
        if replication_regions:
            print(f"   ==> Replicated to: {', '.join(replication_regions)}")
        else:
            print(f"   =X  Not replicated")
        #flush output
        sys.stdout.flush()

        #flush output
        sys.stdout.flush()

        # Check cross-account access
        cross_account_access = check_cross_account_access(secrets_client, secret_name)
        if ( cross_account_access == "No resource policy" ):
            print(f"   =X  No Resource Policy")
        elif ( cross_account_access == "No external access" ):
            print(f"   =X  No external access")
        else:
            print(f"   ==> Cross-Account Access for {secret_name}: {cross_account_access}")

        #flush output
        sys.stdout.flush()

if __name__ == '__main__':
    main()
