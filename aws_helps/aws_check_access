#!/usr/bin/env python3

import boto3
import sys
import argparse
from botocore.exceptions import ClientError

def test_s3_access(s3_client):
    try:
        buckets = s3_client.list_buckets()
        print(f"Access to list S3 buckets: SUCCESS. Buckets count: {len(buckets['Buckets'])}")
    except ClientError as e:
        print(f"Access to list S3 buckets: FAILED. Error: {e}")

def test_secrets_manager_access(secrets_client):
    try:
        secrets = secrets_client.list_secrets()
        print(f"Access to list Secrets Manager secrets: SUCCESS. Secrets count: {len(secrets['SecretList'])}")
    except ClientError as e:
        print(f"Access to list Secrets Manager secrets: FAILED. Error: {e}")

def test_iam_access(iam_client):
    try:
        users = iam_client.list_users()
        print(f"Access to list IAM users: SUCCESS. Users count: {len(users['Users'])}")
    except ClientError as e:
        print(f"Access to list IAM users: FAILED. Error: {e}")

def main():
    parser = argparse.ArgumentParser(
        description='''AWS credential validation and access testing tool.

This tool validates AWS credentials by testing access to key AWS services including S3, 
Secrets Manager, and IAM. It provides immediate feedback on credential validity and 
permissions without requiring complex setup or configuration.

Key use cases:
- Secret access key is prompted for, so it doesn't get logged in command history or become visible to ps
- Credential validation: Quickly test if AWS credentials are valid and working
- Permission verification: Check access to specific AWS services
- Troubleshooting: Diagnose authentication or authorization issues
- Security audits: Verify credential scope and permissions
- Onboarding: Test new user credentials and access levels

The tool tests read access to S3 buckets, Secrets Manager secrets, and IAM users, 
providing clear success/failure messages for each service. It also displays account 
metadata including Account ID, User ARN, and User ID for identity verification.''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('access_key_id', help='AWS Access Key ID to test')
    args = parser.parse_args()

    access_key_id = args.access_key_id
    secret_access_key = input("Enter Secret Access Key: ")

    session = boto3.Session(
        aws_access_key_id=access_key_id,
        aws_secret_access_key=secret_access_key
    )

    # Additional Code to Get Account and User Metadata
    sts_client = session.client('sts')
    try:
        identity = sts_client.get_caller_identity()
        print(f"AWS Account ID: {identity['Account']}")
        print(f"User ARN: {identity['Arn']}")
        print(f"User ID: {identity['UserId']}")
    except ClientError as e:
        print(f"Failed to retrieve user and account metadata: {e}")

    s3_client = session.client('s3')
    secrets_client = session.client('secretsmanager')
    iam_client = session.client('iam')

    test_s3_access(s3_client)
    test_secrets_manager_access(secrets_client)
    test_iam_access(iam_client)


if __name__ == '__main__':
    main()
