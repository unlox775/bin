#!/usr/bin/env python3

import boto3
import sys
import os

# Check if the CLI arguments are provided and set the region and profile variables accordingly.
# argv[0] is always the script name, so we start checking from argv[1].

# Read the first command line arg as the region name; default to 'us-east-1'
region_name = sys.argv[1] if len(sys.argv) > 1 else 'us-east-1'

# Read the second command line arg as the profile name; default to 'default'
profile_name = sys.argv[2] if len(sys.argv) > 2 else 'default'
print(f"Using region: {region_name}, profile: {profile_name}")
# set AWS_PROFILE and AWS_REGION environment variables, so aws-google gets them
os.environ['AWS_PROFILE'] = profile_name
os.environ['AWS_REGION'] = region_name

session = boto3.Session(profile_name=profile_name, region_name=region_name)

def get_associated_resources(role_name): 
    ec2 = session.resource('ec2')
    ec2_client = session.client('ec2')
    lambda_client = session.client('lambda')
    ecs = session.client('ecs')
    iam = session.client('iam')
    
    # EC2 Instances with the specified IAM role
    instances = list(ec2.instances.filter(Filters=[{'Name': 'iam-instance-profile.arn', 'Values': [f"arn:aws:iam::{session.client('sts').get_caller_identity().get('Account')}:instance-profile/{role_name}"]}]))
    running_instances = [inst.id for inst in instances if inst.state['Name'] == 'running']
    stopped_instances = [inst.id for inst in instances if inst.state['Name'] == 'stopped']

    # Lambda Functions
    functions = lambda_client.list_functions()
    associated_functions = [func['FunctionName'] for func in functions['Functions'] if func.get('Role', '').endswith(f"/{role_name}")]

    # ECS Tasks and Services
    ecs_tasks = []
    ecs_services = []
    for cluster_arn in ecs.list_clusters()['clusterArns']:
        task_arns = ecs.list_tasks(cluster=cluster_arn)['taskArns']
        for task_arn in task_arns:
            task = ecs.describe_tasks(cluster=cluster_arn, tasks=[task_arn])['tasks'][0]
            if task.get('taskRoleArn', '').endswith(f"/{role_name}"):
                ecs_tasks.append(task_arn)
        
        service_arns = ecs.list_services(cluster=cluster_arn)['serviceArns']
        for service_arn in service_arns:
            service = ecs.describe_services(cluster=cluster_arn, services=[service_arn])['services'][0]
            if service.get('taskDefinition', '').endswith(f"/{role_name}"):
                ecs_services.append(service_arn)

    # Policies and attached entities (users, groups)
    attached_users = iam.list_entities_for_policy(PolicyArn=f"arn:aws:iam::aws:policy/{role_name}", EntityFilter="User")['PolicyUsers']
    attached_groups = iam.list_entities_for_policy(PolicyArn=f"arn:aws:iam::aws:policy/{role_name}", EntityFilter="Group")['PolicyGroups']

    # Collect resource associations
    associated_resources = {
        'EC2(Running)': len(running_instances),
        'EC2(Stopped)': len(stopped_instances),
        'Lambda': len(associated_functions),
        'ECS_Tasks': len(ecs_tasks),
        'ECS_Services': len(ecs_services),
        'Users': len(attached_users),
        'Groups': len(attached_groups)
    }

    return associated_resources, running_instances, stopped_instances, associated_functions, ecs_tasks, ecs_services

def main():
    iam = session.client('iam')
    roles = iam.list_roles()['Roles']

    for role in roles:
        role_name = role['RoleName']
        print(f"\nRole Name: {role_name}")
        print(f"Role ARN: {role['Arn']}")
        description = role.get('Description', 'No description available')
        print(f"Description: {description}")

        associated_resources, running_instances, stopped_instances, associated_functions, ecs_tasks, ecs_services = get_associated_resources(role_name)

        if sum(associated_resources.values()) > 0:
            print("  <=== Associated Resources:")
            if len(running_instances) > 0:
                print(f"    EC2(Running): {len(running_instances)} instance(s) {', '.join(running_instances[:3])}")
            if len(stopped_instances) > 0:
                print(f"    EC2(Stopped): {len(stopped_instances)} instance(s) {', '.join(stopped_instances[:3])}")
            if len(associated_functions) > 0:
                print(f"    Lambda: {len(associated_functions)} function(s) {', '.join(associated_functions[:3])}")
            if len(ecs_tasks) > 0:
                print(f"    ECS_Tasks: {len(ecs_tasks)} task(s) {', '.join(ecs_tasks[:3])}")
            if len(ecs_services) > 0:
                print(f"    ECS_Services: {len(ecs_services)} service(s) {', '.join(ecs_services[:3])}")
            if associated_resources['Users'] > 0:
                print(f"    IAM Users: {associated_resources['Users']} user(s)")
            if associated_resources['Groups'] > 0:
                print(f"    IAM Groups: {associated_resources['Groups']} group(s)")

        print("----------------------------------------------------------", flush=True)

if __name__ == '__main__':
    main()