#!/usr/bin/perl

#########################
###  column_view
#########################
#
# Version : $Id: column_view,v 1.2 2007/12/06 16:12:52 dave Exp $
#
#########################

#########################
###  Table of Contents
#########################
#
#  Initialization / Libraries
#
#  Main Runtime
#
#  Utility Subroutines
#
#########################








#########################
#########################
###  Initialization / Libraries
#########################
#########################

###  Pragmas
#use strict;








#########################
#########################
###  Main Runtime
#########################
#########################

###  Read in the Comma (and optionally double quoted) data
my @data;
while ( <> ) {
  chomp;
  push @data, [ 
                split_delim_line( 
                                  ',',
                                  $_,
                                  '"'
                                  )
                ];
} 


###  Exit if we don't need to do anything
exit unless @data || @{ $data[0] };


###  Get the Max number of columns
my @lengths = sort { $b <=> $a } map { $#{$_} } @data;
my $max_cols = $lengths[0] || 0;


###  Assemble the list of Maximum Column Widths
my @max_col_widths = ( 
                       ###  Assemble the list of Maximum Column Widths
                       map {
                         my $maxlength = 0;
                         foreach my $row ( @data ) { 
                           if ( length scalar $row->[$_] > $maxlength ) { $maxlength = length scalar $row->[$_] } 
                         }

                         $maxlength;
                       } 0 .. $max_cols
                       );


######  Define the column format based off the widths
###  Create the Format
my $format = ( 
               "format STDOUT =\n" . 
               '| @' .
               join( 
                     ' | @',
                     map {
                       '<' x ($_ - 1);
                     } @max_col_widths
                     ) .
               " |\n" .
               join( 
                     ',',
                     map {
                       "\$row[$_]";
                     } 0 .. $max_cols
                     ) .
               "\n.\n"
               );

###  Run it, so write() calls will use the new FORMAT
eval $format;



######  Print out the data
###  Some space, in case we're being piped to from another comand
print "\n\n";

###  Add in a row of lines '-' after row 0
splice @data, 1, 0, [ 
                      map {
                        '-' x $_;
                      } @max_col_widths
                      ];

###  Print out the data BABY!
foreach ( @data ) {
  local *row = $_;
  write;
}



###  We're done
exit 0;








#########################
#########################
###  Utility Subroutines
#########################
#########################

###  split_delim_line() - Used to split apart a line that is delimited and optionally quoted
sub split_delim_line() {

  ###  Get the parameters
  my ( $delim_value, $line, $delim_quote_value ) = @_;


  ###  Create the container we'll store the field values in
  my @field_values = ();


  ###  Set up the $delim_value and $delim_quote_value
  ###    NOTE: the below system does not work for delimiters
  ###      that are more than 1 characters in length
  $delim_value = quotemeta( $delim_value );
  $delim_quote_value = quotemeta( $delim_quote_value );


  ######  Split apart the delimeted fields
  ###  SPLIT DELIMITED-AND-QUOTED LINES
  if ( $delim_quote_value ) {
    ###  The Quoted Delimeted method
    push(@field_values, $+) while $line =~ m{
      $delim_quote_value
      (
      	[^$delim_quote_value\\]*
      	(?:
      	  $delim_quote_value$delim_quote_value
      	  [^$delim_quote_value\\]*
      	  |
      	  \\.
      	  [^$delim_quote_value\\]*
      	  )*
      	)
      $delim_quote_value
      $delim_value?  ###  Groups the phrase inside the quotes
      | ([^$delim_value]+)$delim_value?
      | $delim_value
        }gx;
    push(@field_values, undef) if substr($line, -1, 1) eq $delim_value;
  }

  ###  SPLIT DELIMITED-AND-UNQUOTED LINES
  else { 
    @field_values = split(/$delim_value/, $line); 
  }


  ###  Return the values
  return @field_values;
}









